"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""Access Token Type"""
type AccessTokenType {
  activatedAt: DateTime
  activatedAtTimestamp: Int
  admin: Admin
  client: Client
  errors: [Error]
  fitnessNetwork: FitnessNetwork
  guru: Guru
  id: ID!
  isActive: Boolean
  profileType: String
  token: String!
  user: User
}

"""Autogenerated input type of ActivateAccessToken"""
input ActivateAccessTokenInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String
}

"""Autogenerated return type of ActivateAccessToken"""
type ActivateAccessTokenPayload {
  accessToken: AccessTokenType

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User
}

"""Autogenerated input type of AddToContact"""
input AddToContactInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  jid: String!
}

"""Autogenerated return type of AddToContact"""
type AddToContactPayload {
  chatAccount: ChatAccount

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Admin"""
type Admin {
  adminType: String
  createdAt: DateTime
  email: String
  errors: [Error]
  firstName: String
  fitnessNetwork: FitnessNetwork
  id: ID!
  isActive: Boolean
  isChatEnabled: Boolean
  isManager: Boolean
  isOwner: Boolean
  isTaskListEnabled: Boolean
  lastName: String
  phoneNumber: String
  title: String
  user: User
}

"""The connection type for Admin."""
type AdminConnection {
  """A list of edges."""
  edges: [AdminEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type AdminEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Admin
}

"""Application adoption statistics"""
type AdoptionStatistic {
  clientsTotalCount: Int!
  clientsUsingAppCount: Int!
  clientsUsingAppRatio: Float!
  clientsWithPhotoCount: Int!
  clientsWithPhotoRatio: Float!
  effectiveDate: Date!
  gurusTotalCount: Int!
  gurusUsingAppCount: Int!
  gurusUsingAppRatio: Float!
  staffTotalCount: Int!
  staffUsingAppCount: Int!
  staffUsingAppRatio: Float!
}

"""Monthly Guru Report"""
type Analytics__GuruReport {
  benchmarks: JSON
  clientDemand: JSON
  clientInfo: JSON
  engagement: JSON
  guru: Guru
  guruSalary: GuruSalary
  hasPendingUpdate: Boolean
  id: ID!
  isLocked: Boolean
  pendingUpdateReasons: [String]
  profitability: JSON
  reportDate: String
  retention: JSON
  scheduling: JSON
  surveys: JSON
}

"""The connection type for Analytics__GuruReport."""
type Analytics__GuruReportConnection {
  """A list of edges."""
  edges: [Analytics__GuruReportEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type Analytics__GuruReportEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Analytics__GuruReport
}

"""Announcement"""
type Announcement {
  contact: ChatAccount
  id: ID!
  lastMessageCreatedAt: Int
  logo: Image
  messages: [AnnouncementMessage!]!
  subTitle: String
  title: String!
  unreadCount: Int
}

"""Announcement Message"""
type AnnouncementMessage {
  id: ID!
  message: String!
}

"""App Version Note"""
type AppVersionNote {
  description: String!
  title: String!
}

"""Average Guru To Business Retention Rate"""
type AvgGtbRetentionRateType {
  avgRate: Float
  avgReturnClients: Float
  avgReturnVisits: Float
  avgTotalClients: Float
  avgTotalVisits: Float
  fullName: String
  guruId: String
  locationId: String
}

"""Average Guru Retention Rate"""
type AvgGuruRetentionRate {
  date: String
  rate: Float
}

"""Autogenerated input type of BanUser"""
input BanUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  jid: String!
  roomJID: String!
}

"""Autogenerated return type of BanUser"""
type BanUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isBanned: Boolean
}

"""Autogenerated input type of BlockContact"""
input BlockContactInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  jid: String!
}

"""Autogenerated return type of BlockContact"""
type BlockContactPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isBlocked: Boolean
}

type Charge {
  amount: String
  createdAt: DateTime
  createdAtTimestamp: Int
  creditCard: CreditCard
  id: ID!
}

"""Chat Account"""
type ChatAccount {
  accountType: String
  avatar: Image
  firstName: String
  jid: String!
  lastName: String
  userId: ID
}

"""The connection type for ChatAccount."""
type ChatAccountConnection {
  """A list of edges."""
  edges: [ChatAccountEdge]

  """A list of nodes."""
  nodes: [ChatAccount]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type ChatAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ChatAccount
}

"""Admin profile information"""
type ChatAdminProfile {
  avatar: Image
  email: String
  firstName: String
  jid: String
  lastName: String
  phoneNumber: String
  studioName: String
}

"""Chat Auth Info"""
type ChatAuthInfoType {
  chatableId: ID
  isActivated: Boolean
  jid: String
  password: String
}

"""Client profile information"""
type ChatClientProfile {
  firstName: String
  jid: String
  lastName: String
}

"""Chat Group information"""
type ChatGroup {
  commonClassmateCount: Int
  description: String
  facebookFriendsCount: Int
  fitGridFriendsCount: Int
  id: ID!
  isAdmin: Boolean
  isPublic: Boolean
  logo: Image
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Filter members by status. Allowed values: 'banned' or 'unbanned', by default returns unbanned members
    """
    status: String
  ): ChatMemberConnection
  name: String
  publicUrlPath: String
  roomJID: String
  typeOfChat: String
}

"""Guru profile information"""
type ChatGuruProfile {
  avatar: Image
  bio: String
  email: String
  firstName: String
  jid: String
  lastName: String
  phoneNumber: String
  studioName: String
}

"""Chat Member"""
type ChatMember {
  accountType: String
  avatar: Image
  firstName: String
  isAdmin: Boolean!
  jid: String!
  lastName: String
  userId: ID
}

"""The connection type for ChatMember."""
type ChatMemberConnection {
  """A list of edges."""
  edges: [ChatMemberEdge]

  """A list of nodes."""
  nodes: [ChatMember]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type ChatMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ChatMember
}

"""Chat Member Profile"""
union ChatMemberProfile = ChatGuruProfile | ChatClientProfile | ChatAdminProfile

"""Chat Participant Type"""
type ChatParticipantType {
  accountType: String
  avatar: Image
  firstName: String
  jid: String
  lastName: String
}

"""The connection type for ChatParticipantType."""
type ChatParticipantTypeConnection {
  """A list of edges."""
  edges: [ChatParticipantTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type ChatParticipantTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ChatParticipantType
}

"""ClientAccount data for Studio/Pro apps"""
type ClassAppProfile {
  age: Int
  birthDate: DateTime
  fitnessGoals: [String!]
  friendsCount: Int
  gender: String
  initiativeProfile: String
  invitationsCount: Int
  levelOfFitness: String
  messageIndicator: String
  motivations: [String!]
  occupation: String
  outsideInterests: [String!]
  pains: [String!]
  registrationFinishedAt: DateTime
  socialOpenness: String
  workoutsPerWeek: Int
}

"""Studio class app data statistics"""
type ClassAppStatistics {
  bookingsCount: Int!
  bookingsGain: Int
  clientsInAppCount: Int!
  clientsInAppGain: Int
  effectiveDate: Date!
  newUsersCount: Int!
  newUsersGain: Int
}

"""Client"""
type Client {
  actualAttendancePerMonth: Int
  age: Int
  attendsCount: Int
  avatar: Image
  birthDate: DateTime
  birthDateTimestamp: Int
  city: String
  classAppProfile: ClassAppProfile
  contactPhoneNumber: String
  duplicateAttendsCount: Int
  email: String
  errors: [Error!]
  favoriteClass: GroupClass
  favoriteInstructor: Guru
  firstAppointmentAt: DateTime
  firstAppointmentAtTimestamp: DateTime
  firstName: String
  firstVisitAt: DateTime
  firstVisitAtTimestamp: DateTime
  fitnessActivities: [String!]
  fitnessFrequency: String
  fitnessNetwork: FitnessNetwork
  gender: String
  goals: [String!]
  hasBirthdayToday: Boolean
  hasClassAppAccount: Boolean!
  hasDuplicateClients: Boolean
  hasPains: Boolean

  """Client ID"""
  id: ID!
  imageUrl: String
  industry: String
  injuries: [String!]
  instructorsTreatment: String
  lastClass: GroupClassSession
  lastName: String
  maritalStatus: String
  mbId: String
  mostRelevantTask: Personas__Task
  motivations: [String!]
  notes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    guruId: ID
    type: String
  ): NoteConnection
  notesCount: Int
  occupation: String
  otherInterests: [String!]
  outsideInterests: [String!]
  personalSpace: String
  profileColor: String
  selfIntroduction: [String!]
  user: User
}

"""Client community information"""
type ClientCommunication {
  client: Client!
  communicationType: String!
  content: String
  reference: Reference
  sender: Sender
  sentAtTimestamp: Int!
  subject: String
}

"""The connection type for ClientCommunication."""
type ClientCommunicationConnection {
  """A list of edges."""
  edges: [ClientCommunicationEdge]

  """A list of nodes."""
  nodes: [ClientCommunication]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type ClientCommunicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ClientCommunication
}

"""The connection type for Client."""
type ClientConnection {
  """A list of edges."""
  edges: [ClientEdge]

  """A list of nodes."""
  nodes: [Client]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""Client data statistics"""
type ClientDataStatistic {
  clientsUsingAppCount: Int!
  effectiveDate: Date!
  fitnessGoals: JSON!
  motivations: JSON!
  pains: JSON!
  workoutsPerWeek: JSON!
}

"""An edge in a connection."""
type ClientEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Client
}

"""Client Feedback information"""
type ClientFeedback {
  client: Client!
  comment: String
  fitnessNetworkVisitsCount: Int
  groupClassSession: GroupClassSession
  guru: Guru!
  guruVisitsCount: Int
  id: ID!
  location: Location!
  paymentType: String
  rating: String!
  receivedAtTimestamp: Int!
}

"""The connection type for ClientFeedback."""
type ClientFeedbackConnection {
  """A list of edges."""
  edges: [ClientFeedbackEdge]

  """A list of nodes."""
  nodes: [ClientFeedback]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type ClientFeedbackEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ClientFeedback
}

"""Client Offer Type"""
type ClientOffer {
  client: Client
  id: ID!
  lostAccountsOffer: LostAccountsOffer
  offerDescription: String
  offerLabel: String
  purchasedAt: DateTime
}

"""Title and percentage of an insight of a given type"""
type CommunityOrientedInsight {
  category: String!
  percentage: Int!
  title: String
}

"""Client profiles and related to them stats"""
type CommunityOrientedStatistics {
  clientWithMostBookings: Client
  clientWithMostReferrals: Client
  latestClientsOnClassApp: [Client!]!
  mostConnectedClient: Client
  topFitnessGoals: CommunityOrientedInsight
  topMotivations: CommunityOrientedInsight
  topPains: CommunityOrientedInsight
  topWorkoutGoals: CommunityOrientedInsight
  totalClients: Int
  totalConnectedClients: Int
  totalInvitationsSent: Int
}

"""Autogenerated input type of ConfirmZoomAccess"""
input ConfirmZoomAccessInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  code: String!
}

"""Autogenerated return type of ConfirmZoomAccess"""
type ConfirmZoomAccessPayload {
  accountType: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  licensedUsersCount: Int
  status: Boolean
}

"""Contact Item"""
union ContactItem = ChatAccount | ChatGroup | Announcement

"""Contact Type"""
type ContactType {
  blockerChatAccount: ChatAccount
  isBlocked: Boolean
  item: ContactItem
}

"""The connection type for ContactType."""
type ContactTypeConnection {
  """A list of edges."""
  edges: [ContactTypeEdge]

  """A list of nodes."""
  nodes: [ContactType]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type ContactTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ContactType
}

"""Autogenerated input type of CreateAdmin"""
input CreateAdminInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  email: String!
  title: String
  firstName: String
  lastName: String
  phoneNumber: String
  isActive: Boolean
  isChatEnabled: Boolean
  isManager: Boolean = true
  isTaskListEnabled: Boolean
}

"""Autogenerated return type of CreateAdmin"""
type CreateAdminPayload {
  admin: Admin

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateChatGroupMutation"""
input CreateChatGroupMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  name: String!
  description: String
  isPublic: Boolean!
  publicUrlPath: String
  logo: String
}

"""Autogenerated return type of CreateChatGroupMutation"""
type CreateChatGroupMutationPayload {
  chatGroup: ChatGroup

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateFitnessNetwork"""
input CreateFitnessNetworkInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  adminTitle: String
  adminEmail: String
  adminFirstName: String
  adminLastName: String
  name: String
  description: String
  mbSiteId: Int
  mbUsername: String
  mbPassword: String
  contactFirstName: String
  contactLastName: String
  contactEmail: String
  contactPhoneNumber: String
  hasMultiGuruClasses: Boolean
  activationTime: String
  termsFlg: Boolean
}

"""Autogenerated return type of CreateFitnessNetwork"""
type CreateFitnessNetworkPayload {
  admin: Admin

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  user: User
}

"""Autogenerated input type of CreateFollowupGroup"""
input CreateFollowupGroupInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  name: String!
  description: String
  recommendedSubject: String!
  recommendedContent: String!
  isActive: Boolean
  position: Int
  isAll: Boolean = false
  attendsNumber: Int
}

"""Autogenerated return type of CreateFollowupGroup"""
type CreateFollowupGroupPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  followupGroup: FollowupGroup
}

"""Autogenerated input type of CreateFollowupGroups"""
input CreateFollowupGroupsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  followupGroups: [FollowupGroupInput]!
}

"""Autogenerated return type of CreateFollowupGroups"""
type CreateFollowupGroupsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  followupGroups: [FollowupGroup]
}

"""Autogenerated input type of CreateGuruSalary"""
input CreateGuruSalaryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruId: ID!
  type: String!
  effectiveDate: DateTime!
  amount: Int
  amountPerClass: Int
  amountPerVisit: Int
  visitThreshold: Int
}

"""Autogenerated return type of CreateGuruSalary"""
type CreateGuruSalaryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruSalary: GuruSalary
}

"""Autogenerated input type of CreateNote"""
input CreateNoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruId: ID!
  type: String!
  clientId: ID!
  body: String!
}

"""Autogenerated return type of CreateNote"""
type CreateNotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  note: Note
}

"""Autogenerated input type of CreateSupportRequest"""
input CreateSupportRequestInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String
  email: String
  message: String!
  screenshot: String
}

"""Autogenerated return type of CreateSupportRequest"""
type CreateSupportRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  supportRequest: SupportRequest
}

type CreditCard {
  brand: String
  expirationDate: DateTime
  expirationDateTimestamp: Int
  id: ID!
  isDefault: Boolean
  last4: String
}

"""The connection type for CreditCard."""
type CreditCardConnection {
  """A list of edges."""
  edges: [CreditCardEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type CreditCardEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CreditCard
}

"""Lost Accounts Daily Statistics Type"""
type DailyStatsType {
  id: ID!
  openRate: Float
  profit: Float
  purchasedOffers: Int
  returnedClients: Int
  sentMessages: Int
}

"""Represents Date Value as string (YYYY-MM-DD)"""
scalar Date

scalar DateTime

"""Default Guru Followup Group"""
type DefaultGuruFollowup {
  content: String
  errors: [Error]
  followupGroup: FollowupGroup
  guru: Guru
  id: ID!
  subject: String!
}

"""The connection type for DefaultGuruFollowup."""
type DefaultGuruFollowupConnection {
  """A list of edges."""
  edges: [DefaultGuruFollowupEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type DefaultGuruFollowupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DefaultGuruFollowup
}

"""Autogenerated input type of DeleteAdmin"""
input DeleteAdminInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  adminId: ID!
}

"""Autogenerated return type of DeleteAdmin"""
type DeleteAdminPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Boolean
}

"""Autogenerated input type of DeleteChatGroup"""
input DeleteChatGroupInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  roomJID: String!
}

"""Autogenerated return type of DeleteChatGroup"""
type DeleteChatGroupPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isDeleted: Boolean
}

"""Autogenerated input type of DeleteFromContacts"""
input DeleteFromContactsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  jid: String!
}

"""Autogenerated return type of DeleteFromContacts"""
type DeleteFromContactsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isDeleted: Boolean
}

"""Autogenerated input type of DeleteNote"""
input DeleteNoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  noteId: ID!
}

"""Autogenerated return type of DeleteNote"""
type DeleteNotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  noteId: ID
  status: Boolean
}

"""Error"""
type Error {
  field: String!
  messages: [String]!
}

"""Fitness activity info"""
type FitnessActivity {
  id: ID!
  isActive: Boolean!
  name: String!
  order: Int
}

"""The connection type for FitnessActivity."""
type FitnessActivityConnection {
  """A list of edges."""
  edges: [FitnessActivityEdge]

  """A list of nodes."""
  nodes: [FitnessActivity]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type FitnessActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FitnessActivity
}

"""Fitness Netowrk details"""
type FitnessNetwork {
  activatedAt: DateTime
  activatedAtTimestamp: Int
  activationTime: DateTime
  activationTimestamp: Int
  activeSubscription: Subscription
  admins(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): AdminConnection
  charge: Charge @deprecated(reason: "ChargeType depreciated and will be removed")
  classAppMarketingEmailsEnabled: Boolean
  classAppMarketingEmailsEnabledChangedAt: DateTime
  clients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fullName: String
    order: [String]
    ageRange: [Int]
    gender: String
    attendsNumberRange: [Int]
  ): ClientConnection
  contactEmail: String
  contactFirstName: String
  contactLastName: String
  contactPhoneNumber: String
  countryCode: String
  creditCard: CreditCard
  creditCards(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): CreditCardConnection
  defaultIsZoomEnabled: Boolean
  description: String
  errors: [Error]
  fitnessActivity: FitnessActivity
  followupGroups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): FollowupGroupConnection
  groupClassSessions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    ids: [ID]

    """Available statuses: 'completed', 'past', 'scheduled', 'visible'"""
    scope: String!
    startTimeRange: [String]
    endTimeRange: [String]
    orderByStartTime: OrderEnum
    orderByEndTime: OrderEnum
    zoomEnabled: Boolean
  ): GroupClassSessionConnection
  groupClasses(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): GroupClassConnection
  guruFollowupGroups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    order: [String]
    guruIds: [ID]
    locationIds: [ID]
    groupDateRange: [String]
    attendsNumbers: [Int]
    contentType: [String]
    showGroupsForFollowupAll: Boolean
  ): GuruFollowupConnection
  guruFollowups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    order: [String]
    guruIds: [ID]
    locationIds: [ID]
    groupDateRange: [String]
    sentTimeRange: [String]
    attendsNumbers: [Int]
    contentType: [String]
  ): GuruFollowupConnection
  gurus(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    guruIds: [ID]
    fullName: String
    order: [String]

    """
    Available scopes: ["all", "active", "activated", "invited", "invited_only",
    "orphan", "passive", "use_followups", "customize_followups", "use_notes",
    "with_future_classes", "with_lost_accounts_active", "suspended"]
    """
    scope: String
    locationIds: [ID]
  ): GuruConnection
  hasLiveVisible: Boolean
  hasLostAccountsActive: Boolean
  hasSurveyVisible: Boolean
  hasSurveysEnabled: Boolean
  hasTaskListVisible: Boolean
  hasZoomIntegration: Boolean
  hasZoomUserManagement: Boolean
  id: ID!
  initialPullSinceDate: Date
  isActive: Boolean
  isAllowedUpdateLocations: Boolean
  isAutoZoomEnabled: Boolean
  isChatEnabled: Boolean
  isFollowupAllEnabled: Boolean
  isSetupDone: Boolean
  isTaskListEnabled: Boolean
  isZoomEnabled: Boolean
  locations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): LocationConnection
  logo: Image
  mbActivationCode: String
  mbActivationLink: String
  mbSiteId: Int
  mbUsername: String
  name: String
  pricingOptions: [PricingOption]
  setupSteps: [String]
  socials: [SocialType]
  stripeAccountOnboardingLink: String

  """
  Step that defines whether resource has not started / started / completed Stripe integration
  """
  stripeAccountOnboardingStep: StripeAccountOnboardingStepEnum
  stripeOnboardingAllowed: Boolean
  taskListDefaultNumber: Int
  timezone: String
  zoomAccountType: String @deprecated(reason: "Use zoomUsers connection instead")
  zoomCallsCount: Int
  zoomUsers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Instructs to synchronously fetch users from Zoom before serving results.
    """
    forcePull: Boolean

    """Possible values: 'basic', 'licensed', 'on_prem'"""
    licenseType: String
    selected: Boolean
    enabled: Boolean

    """Filter to return only users created after the provided timestamp."""
    createdAfterTimestamp: Int
  ): ZoomUserConnection
}

"""The connection type for FitnessNetwork."""
type FitnessNetworkConnection {
  """A list of edges."""
  edges: [FitnessNetworkEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type FitnessNetworkEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FitnessNetwork
}

"""Fitness Network """
type FitnessNetworkPublic {
  description: String
  gurus(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fullName: String
    invitedOnly: Boolean
  ): PublicProfileConnection
  id: ID!
  name: String
}

"""The connection type for FitnessNetworkPublic."""
type FitnessNetworkPublicConnection {
  """A list of edges."""
  edges: [FitnessNetworkPublicEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type FitnessNetworkPublicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FitnessNetworkPublic
}

"""Fitness Network Retention Rate type"""
type FitnessNetworkRetentionRate {
  locationId: String
  rate: Float
  retentionDate: String
}

"""Followup Efficiency Statistic"""
type FollowupEfficiencyStatisticsType {
  didntReceivedFollowupsCount: Int
  didntReceivedFollowupsReturnRate: Float
  didntReceivedFollowupsReturnsCount: Int
  effectiveDate: String
  efficiencyRate: Float
  firsttimersCount: Int
  firsttimersReturnRate: Float
  firsttimersReturnsCount: Int
  followupOpenedCount: Int
  followupOpenedReturnRate: Float
  followupOpenedReturnsCount: Int
  followupReceivedCount: Int
  followupReceivedReturnRate: Float
  followupReceivedReturnsCount: Int
  isPositive: Boolean
  lastSixMonthsAvgRate: Float
}

"""The connection type for FollowupEfficiencyStatisticsType."""
type FollowupEfficiencyStatisticsTypeConnection {
  """A list of edges."""
  edges: [FollowupEfficiencyStatisticsTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type FollowupEfficiencyStatisticsTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FollowupEfficiencyStatisticsType
}

"""Followup Group"""
type FollowupGroup {
  attendsNumber: Int
  daysToFollowup: Int
  defaultGuruFollowups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    guruIds: [ID]
  ): DefaultGuruFollowupConnection
  description: String
  errors: [Error]
  fitnessNetwork: FitnessNetwork
  guruFollowupGroups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): GuruFollowupConnection
  id: ID!
  isActive: Boolean
  isAll: Boolean
  name: String
  position: Int
  recommendedContent: String
  recommendedSubject: String
}

"""The connection type for FollowupGroup."""
type FollowupGroupConnection {
  """A list of edges."""
  edges: [FollowupGroupEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type FollowupGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FollowupGroup
}

"""FollowupGroup input type"""
input FollowupGroupInput {
  followupGroupId: ID
  name: String
  description: String
  recommendedSubject: String!
  recommendedContent: String!
  isActive: Boolean
  position: Int
  isAll: Boolean
  attendsNumber: Int
}

"""The connection type for FollowupStatisticType."""
type FollowupStatisticTotalCountType {
  """A list of edges."""
  edges: [FollowupStatisticTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""Followup Statistic"""
type FollowupStatisticType {
  clicked: Int
  customType: Int
  defaultType: Int
  endDate: String
  followupGroupId: String
  followupGroupName: String
  guruFullName: String
  guruId: String
  locationId: String
  opened: Int
  sent: Int
  startDate: String
  total: Int
}

"""An edge in a connection."""
type FollowupStatisticTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: FollowupStatisticType
}

"""Autogenerated input type of GenerateAccessToken"""
input GenerateAccessTokenInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  profileId: ID!
}

"""Autogenerated return type of GenerateAccessToken"""
type GenerateAccessTokenPayload {
  accessToken: AccessTokenType
  admin: Admin
  client: Client

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guru: Guru
}

"""Autogenerated input type of GenerateActivationCode"""
input GenerateActivationCodeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID
}

"""Autogenerated return type of GenerateActivationCode"""
type GenerateActivationCodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
}

"""Guru and Fitness Network Global Retention Rate type"""
type GlobalRetentionRate {
  date: String
  rate: Float
}

"""Group Class"""
type GroupClass {
  description: String
  errors: [Error!]
  fitnessActivities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): FitnessActivityConnection
  fitnessNetwork: FitnessNetwork
  groupClassSessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupClassSessionConnection
  id: ID!
  name: String!
  totalScheduled: Int
}

"""The connection type for GroupClass."""
type GroupClassConnection {
  """A list of edges."""
  edges: [GroupClassEdge]

  """A list of nodes."""
  nodes: [GroupClass]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type GroupClassEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GroupClass
}

"""Session of Group Class"""
type GroupClassSession {
  activeClients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    ageRange: [Int]
    attendsNumberRange: [Int]
    gender: String
    fullName: String
    order: [String]
    quizQuestion: String
    quizAnswerId: ID
  ): ClientConnection
  activeReservations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    order: [String]
  ): ReservationConnection
  capacity: Int
  description: String
  endTime: String!
  endTimeTimestamp: Int
  errors: [Error]
  fitnessNetwork: FitnessNetwork
  groupClass: GroupClass
  guru: Guru
  gurus(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): GuruConnection
  hasSubstitute: Boolean
  id: ID!
  isZoomEnabled: Boolean
  location: Location
  name: String!

  """
  Global IDs of zoom-enabled GroupClassSessions that overlap with current one.
  """
  overlappingSessionIds: [ID]
  overlappingSessionsCount: Int
  startTime: String!
  startTimeTimestamp: Int
  status: String!
  totalBooked: Int
  zoomJoinUrl: String
  zoomMeetingId: String
  zoomParticipantsPulledAt: String
  zoomPassword: String
  zoomStartUrl: String
  zoomUser: ZoomUser
  zoomUserId: ID
}

"""The connection type for GroupClassSession."""
type GroupClassSessionConnection {
  """A list of edges."""
  edges: [GroupClassSessionEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GroupClassSessionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GroupClassSession
}

"""Sessions that overlap within a time range"""
type GroupClassSessionOverlaps {
  endTime: String!
  endTimeTimestamp: Int!
  groupClassSessions: [GroupClassSession!]
  startTime: String!
  startTimeTimestamp: Int!
}

"""Guru To Business Retention Rate type"""
type GtbRetentionRate {
  guruId: String
  locationId: String
  rate: Float
  retentionDate: String
  returnClients: Float
  returnVisits: Float
  totalClients: Float
  totalVisits: Float
}

"""The connection type for GtbRetentionRate."""
type GtbRetentionRateConnection {
  """A list of edges."""
  edges: [GtbRetentionRateEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GtbRetentionRateEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GtbRetentionRate
}

"""Guru"""
type Guru {
  activatedAt: DateTime
  activatedAtTimestamp: Int
  avatar: Image
  bio: String
  clients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fullName: String
    order: [String]
    ageRange: [Int]
    attendsNumberRange: [Int]
    gender: String
    pain: ID
  ): ClientConnection
  defaultGuruFollowups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    followupGroupIds: [ID]
    showAll: Boolean
  ): DefaultGuruFollowupConnection
  email: String
  errors: [Error]
  firstName: String
  fitnessNetwork: FitnessNetwork
  fitnessNetworkId: String
  followupStats(timeRange: [String], fields: [String]!): [Statistics]
  groupClassSessions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    startTimeRange: [String]
    endTimeRange: [String]
    orderByStartTime: OrderEnum
    orderByEndTime: OrderEnum

    """Available statuses: 'completed', 'past', 'scheduled', 'visible'"""
    scope: String
  ): GroupClassSessionConnection
  guruFollowupGroups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    groupDateRange: [String]
  ): GuruFollowupGroupConnection
  guruFollowups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    order: [String]
    guruIds: [ID]
    locationIds: [ID]
    groupDateRange: [String]
    sentTimeRange: [String]
    attendsNumbers: [Int]
    contentType: [String]
  ): GuruFollowupConnection
  guruSalary: GuruSalary
  hasAutoFollowupActive: Boolean
  hasClientCheckinAllowed: Boolean
  hasFollowupActive: Boolean
  hasLostAccountsActive: Boolean
  hasSurveysActive: Boolean
  hasSurveysVisible: Boolean
  id: ID!
  imageUrl: String
  isActivated: Boolean
  isActive: Boolean
  isChatEnabled: Boolean
  isCustomizingFollowups: Boolean
  isInvited: Boolean
  isUsingFollowups: Boolean
  isUsingNotes: Boolean
  lastName: String
  locations: [Location]
  mobilePhoneNumber: String
  notes(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    clientIds: [ID]
  ): NoteConnection
  phoneNumber: String
  profileColor: String
  socials: [SocialType]
  suspendedAt: DateTime
  suspendedAtTimestamp: Int
  user: User
}

"""Guru Benchmark info"""
type GuruBenchmark {
  clientFeedbackRating: String!
  guru: Guru!
  id: ID!
}

"""The connection type for GuruBenchmark."""
type GuruBenchmarkConnection {
  """A list of edges."""
  edges: [GuruBenchmarkEdge]

  """A list of nodes."""
  nodes: [GuruBenchmark]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type GuruBenchmarkEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GuruBenchmark
}

"""The connection type for Guru."""
type GuruConnection {
  """A list of edges."""
  edges: [GuruEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GuruEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Guru
}

"""Guru Followup"""
type GuruFollowup {
  content: String
  contentType: String
  errors: [Error]
  guru: Guru
  guruFollowupGroup: GuruFollowupGroup
  guruFollowupRecipients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): GuruFollowupRecipientConnection
  id: ID!
  location: Location
  sentAt: DateTime
  sentAtTimestamp: Int
  socials: String
  subject: String
}

"""The connection type for GuruFollowup."""
type GuruFollowupConnection {
  """A list of edges."""
  edges: [GuruFollowupEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GuruFollowupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GuruFollowup
}

"""Guru Followup Group"""
type GuruFollowupGroup {
  defaultGuruFollowup: DefaultGuruFollowup
  errors: [Error]
  fitnessNetwork: FitnessNetwork
  followupGroup: FollowupGroup
  groupClassSession: GroupClassSession
  groupDate: DateTime
  guru: Guru
  guruFollowupRecipients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): GuruFollowupRecipientConnection
  guruFollowups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): GuruFollowupConnection
  id: ID!
  isCompleted: Boolean
  notifiedAt: DateTime
  position: Int
}

"""The connection type for GuruFollowupGroup."""
type GuruFollowupGroupConnection {
  """A list of edges."""
  edges: [GuruFollowupGroupEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GuruFollowupGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GuruFollowupGroup
}

"""Guru Followup Recipient"""
type GuruFollowupRecipient {
  client: Client
  errors: [Error]
  groupClassSession: GroupClassSession
  guruFollowup: GuruFollowup
  guruFollowupGroup: GuruFollowupGroup
  id: ID!
  reservation: Reservation
  sentAt: DateTime
  sentAtTimestamp: Int
}

"""The connection type for GuruFollowupRecipient."""
type GuruFollowupRecipientConnection {
  """A list of edges."""
  edges: [GuruFollowupRecipientEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GuruFollowupRecipientEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GuruFollowupRecipient
}

"""Guru input type"""
input GuruInput {
  guruId: ID!
  email: String
  mobilePhoneNumber: String
  isActive: Boolean!
  hasClientCheckinAllowed: Boolean
  hasFollowupActive: Boolean
  hasAutoFollowupActive: Boolean
  hasLostAccountsActive: Boolean
  isChatEnabled: Boolean
  hasSurveysActive: Boolean
  hasSurveysVisible: Boolean
}

"""Guru Retention Rate type"""
type GuruRetentionRate {
  guru: Guru
  locationId: String
  rate: Float
  retentionDate: String
}

"""The connection type for GuruRetentionRate."""
type GuruRetentionRateConnection {
  """A list of edges."""
  edges: [GuruRetentionRateEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GuruRetentionRateEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GuruRetentionRate
}

"""Guru Salary"""
type GuruSalary {
  amount: Float
  amountPerClass: Float
  amountPerVisit: Float
  effectiveDate: DateTime
  errors: [Error]
  guruId: ID
  id: ID!
  type: String
  visitThreshold: Int
}

"""The connection type for GuruSalary."""
type GuruSalaryConnection {
  """A list of edges."""
  edges: [GuruSalaryEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type GuruSalaryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GuruSalary
}

"""Guru Statistic"""
type GuruStatistic {
  activated: Int
  active: Int
  customizeFollowups: Int
  date: Date
  invited: Int
  locationId: String
  total: Int
  useFollowups: Int
  useNotes: Int
}

"""Hash type"""
scalar Hash

"""Image Type"""
type Image {
  id: ID!
  mediumUrl: String
  originalUrl: String
  thumbUrl: String
}

"""Incoming email info"""
type IncomingEmail {
  content: String
  sender: Sender
  sentAtTimestamp: Int!
}

"""The connection type for IncomingEmail."""
type IncomingEmailConnection {
  """A list of edges."""
  edges: [IncomingEmailEdge]

  """A list of nodes."""
  nodes: [IncomingEmail]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""An edge in a connection."""
type IncomingEmailEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IncomingEmail
}

"""Represents Interval Value"""
scalar IntervalType

"""Autogenerated input type of InviteToChat"""
input InviteToChatInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  roomJID: String!
  userJIDS: [String]!
}

"""Autogenerated return type of InviteToChat"""
type InviteToChatPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  userJIDS: [String]
}

"""Autogenerated input type of JoinChat"""
input JoinChatInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  publicUrlPath: String!
}

"""Autogenerated return type of JoinChat"""
type JoinChatPayload {
  chatGroup: ChatGroup

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""JSON type"""
scalar JSON

"""KPI report type"""
type KpiReportType {
  averageFirstTimeVisitsPerDay: Float
  averageProfitPerClass: Float
  averageVisits: Int
  date: String
  fillRate: Float
  firstTimeClientsReturnRate: Float
  followupEffectiveness: Float
  followupEffectivenessAverage: Float
  followupOpenRate: Float
  followupResponseRate: Float
  followupSentRate: Float
  guru: Guru
  profit: Float
  retentionRate: Float
  totalClassesTaught: Int
  totalVisits: Int
}

"""The connection type for KpiReportType."""
type KpiReportTypeConnection {
  """A list of edges."""
  edges: [KpiReportTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type KpiReportTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: KpiReportType
}

"""Autogenerated input type of LeaveChat"""
input LeaveChatInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  roomJID: String!
}

"""Autogenerated return type of LeaveChat"""
type LeaveChatPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isLeft: Boolean!
}

"""Results limit per request"""
scalar Limit

"""Autogenerated input type of LinkContacts"""
input LinkContactsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  jid: String!
}

"""Autogenerated return type of LinkContacts"""
type LinkContactsPayload {
  chatAccount: ChatAccount

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Location of fitness network"""
type Location {
  address: String
  city: String
  countryCode: String
  fitnessNetwork: FitnessNetwork
  id: ID!
  isActive: Boolean
  latitude: String
  longitude: String
  name: String!
  phoneNumber: String
  postalCode: String
  state: String
}

"""The connection type for Location."""
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Location
}

"""Location input type"""
input LocationInput {
  locationId: ID!
  isActive: Boolean!
}

"""Lost accounts default bucket"""
type LostAccountsBucket {
  content: String
  id: ID!
  isActive: Boolean
  isSet: Boolean
  lostAccountsDefaultBucket: LostAccountsDefaultBucket
  subject: String
}

"""The connection type for LostAccountsBucket."""
type LostAccountsBucketConnection {
  """A list of edges."""
  edges: [LostAccountsBucketEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type LostAccountsBucketEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: LostAccountsBucket
}

"""Lost accounts default bucket"""
type LostAccountsDefaultBucket {
  content: String
  ctaLabel: String
  ctaLink: String
  days: Int
  errors: [Error]
  fitnessNetworkId: ID
  id: ID!
  isActive: Boolean
  lostAccountsOffer: LostAccountsOffer
  offerDescription: String
  offerDiscountAmount: Float
  offerFinePrint: String
  offerLabel: String
  offerRedirectUrl: String
  position: Int
  subject: String
}

"""The connection type for LostAccountsDefaultBucket."""
type LostAccountsDefaultBucketConnection {
  """A list of edges."""
  edges: [LostAccountsDefaultBucketEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type LostAccountsDefaultBucketEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: LostAccountsDefaultBucket
}

"""Lost accounts default bucket input type"""
input LostAccountsDefaultBucketInput {
  subject: String!
  content: String!
  isActive: Boolean
  position: Int
  days: Int!
  offerLabel: String
  offerDescription: String
  offerFinePrint: String
  offerDiscountAmount: Float
  offerRedirectUrl: String
  lostAccountsOfferId: ID
  pricingOptionId: ID
  ctaLabel: String
  ctaLink: String
}

"""Lost accounts default sender"""
type LostAccountsDefaultSender {
  email: String
  firstName: String
  id: ID!
  lastName: String
}

"""Lost Accounts Message Type"""
type LostAccountsMessage {
  clientOffer: ClientOffer
  content: String
  fitnessNetwork: FitnessNetwork
  guru: Guru
  id: ID!
  recipient: LostAccountsRecipient
  sendAt: DateTime
  subject: String
}

"""The connection type for LostAccountsMessage."""
type LostAccountsMessageConnection {
  """A list of edges."""
  edges: [LostAccountsMessageEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type LostAccountsMessageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: LostAccountsMessage
}

"""Lost accounts offer"""
type LostAccountsOffer {
  amount: Float
  discountAmount: Float
  id: ID!
  isActive: Boolean
  name: String
  originalAmount: Float
  pricingOption: PricingOption
}

"""The connection type for LostAccountsOffer."""
type LostAccountsOfferConnection {
  """A list of edges."""
  edges: [LostAccountsOfferEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type LostAccountsOfferEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: LostAccountsOffer
}

"""Lost Accounts Recipient Type"""
type LostAccountsRecipient {
  avatar: Image
  firstName: String
  id: ID!
  lastName: String
}

"""Autogenerated input type of MarkSurveyAnswerMutation"""
input MarkSurveyAnswerMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  surveyAnswerId: ID!
}

"""Autogenerated return type of MarkSurveyAnswerMutation"""
type MarkSurveyAnswerMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  surveyAnswer: SurveyAnswer
}

"""Autogenerated input type of MarkSurveyAnswersMutation"""
input MarkSurveyAnswersMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruIds: [ID]!
  untilTimestamp: Int!
  fromTimestamp: Int
}

"""Autogenerated return type of MarkSurveyAnswersMutation"""
type MarkSurveyAnswersMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  surveyAnswerIds: [ID]
}

"""Lost Accounts Monthly Statistics Type for one month"""
type MonthlyStatsOneMonthType {
  clickRate: Float
  daysSinceLastVisit: Int
  openRate: Float
  profit: Float
  purchasedOffers: Int
  returnedClients: Int
  sentMessages: Int
}

"""The connection type for MonthlyStatsOneMonthType."""
type MonthlyStatsOneMonthTypeConnection {
  """A list of edges."""
  edges: [MonthlyStatsOneMonthTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type MonthlyStatsOneMonthTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MonthlyStatsOneMonthType
}

"""Lost Accounts Monthly Statistics Type"""
type MonthlyStatsType {
  month: String
  monthStatistics(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): MonthlyStatsOneMonthTypeConnection
}

"""The connection type for MonthlyStatsType."""
type MonthlyStatsTypeConnection {
  """A list of edges."""
  edges: [MonthlyStatsTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type MonthlyStatsTypeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MonthlyStatsType
}

type Mutation {
  activateAccessToken(input: ActivateAccessTokenInput!): ActivateAccessTokenPayload

  """Add ChatAccount to Contacts"""
  addToContacts(input: AddToContactInput!): AddToContactPayload

  """Ban User in Chat"""
  banUser(input: BanUserInput!): BanUserPayload

  """Block Contact"""
  blockContact(input: BlockContactInput!): BlockContactPayload

  """Confirm Zoom access and receive access tokens"""
  confirmZoomAccess(input: ConfirmZoomAccessInput!): ConfirmZoomAccessPayload
  createAdmin(input: CreateAdminInput!): CreateAdminPayload

  """Create new Public/Private Chat Group"""
  createChatGroup(input: CreateChatGroupMutationInput!): CreateChatGroupMutationPayload
  createFitnessNetwork(input: CreateFitnessNetworkInput!): CreateFitnessNetworkPayload
  createFollowupGroup(input: CreateFollowupGroupInput!): CreateFollowupGroupPayload
  createFollowupGroups(input: CreateFollowupGroupsInput!): CreateFollowupGroupsPayload
  createGuruSalary(input: CreateGuruSalaryInput!): CreateGuruSalaryPayload
  createNote(input: CreateNoteInput!): CreateNotePayload
  createSupportRequest(input: CreateSupportRequestInput!): CreateSupportRequestPayload
  deleteAdmin(input: DeleteAdminInput!): DeleteAdminPayload

  """Delete Public/Private Chat Group or Broadcast"""
  deleteChatGroup(input: DeleteChatGroupInput!): DeleteChatGroupPayload

  """Delete ChatAccount to Contacts"""
  deleteFromContacts(input: DeleteFromContactsInput!): DeleteFromContactsPayload
  deleteNote(input: DeleteNoteInput!): DeleteNotePayload
  generateAccessToken(input: GenerateAccessTokenInput!): GenerateAccessTokenPayload
  generateActivationCode(input: GenerateActivationCodeInput!): GenerateActivationCodePayload

  """Invite Users to Chat/Broadcast"""
  inviteToChat(input: InviteToChatInput!): InviteToChatPayload

  """Join To Chat or Broadcast"""
  joinChat(input: JoinChatInput!): JoinChatPayload

  """Leave Chat or Broadcast"""
  leaveChat(input: LeaveChatInput!): LeaveChatPayload
  linkContacts(input: LinkContactsInput!): LinkContactsPayload
  markSurveyAnswer(input: MarkSurveyAnswerMutationInput!): MarkSurveyAnswerMutationPayload
  markSurveyAnswers(input: MarkSurveyAnswersMutationInput!): MarkSurveyAnswersMutationPayload

  """Read Announcement"""
  readAnnouncement(input: ReadAnnouncementInput!): ReadAnnouncementPayload
  registerDevice(input: RegisterDeviceInput!): RegisterDevicePayload
  requestActivationLink(input: RequestActivationLinkMutationInput!): RequestActivationLinkMutationPayload
  sendFollowups(input: SendFollowupInput!): SendFollowupPayload
  sendInvites(input: SendInvitesMutationInput!): SendInvitesMutationPayload
  sendTaskMessage(input: SendTaskMessageInput!): SendTaskMessagePayload
  setCreditCard(input: SetCreditCardInput!): SetCreditCardPayload
  setDefaultGuruFollowup(input: SetDefaultGuruFollowupInput!): SetDefaultGuruFollowupPayload
  setFollowupGroups(input: SetFollowupGroupsInput!): SetFollowupGroupsPayload
  setGuruSuspension(input: SetGuruSuspensionInput!): SetGuruSuspensionPayload
  setGurus(input: SetGurusInput!): SetGurusPayload
  setLocations(input: SetLocationsInput!): SetLocationsPayload
  setLostAccountsBucket(input: SetLostAccountsBucketInput!): SetLostAccountsBucketPayload
  setLostAccountsDefaultBuckets(input: SetLostAccountsDefaultBucketsInput!): SetLostAccountsDefaultBucketsPayload
  setLostAccountsDefaultSender(input: SetLostAccountsDefaultSenderInput!): SetLostAccountsDefaultSenderPayload
  setPricingOptions(input: SetPricingOptionsInput!): SetPricingOptionsPayload

  """
  This mutation is for Pricing Plan migration only. It will be removed after Dec 12th, 2019
  """
  setPromoSubscription(input: SetPromoSubscriptionInput!): SetPromoSubscriptionPayload
  setSocials(input: SetSocialsInput!): SetSocialsPayload
  setStripeAccount(input: SetStripeAccountInput!): SetStripeAccountPayload
  setSubscription(input: SetSubscriptionInput!): SetSubscriptionPayload
  setUserSocials(input: SetUserSocialsInput!): SetUserSocialsPayload
  setZoomPreferences(input: SetZoomPreferencesInput!): SetZoomPreferencesPayload
  setZoomUsers(input: SetZoomUsersInput!): SetZoomUsersPayload

  """Sign Out Mutation"""
  signOut(input: SignOutInput!): SignOutPayload
  submitMetaData(input: SubmitMetaDataInput!): SubmitMetaDataPayload

  """Unban User in Chat"""
  unBanUser(input: UnBanUserInput!): UnBanUserPayload
  updateAdmin(input: UpdateAdminInput!): UpdateAdminPayload

  """Update Public/Private Chat Group"""
  updateChatGroup(input: UpdateChatGroupInput!): UpdateChatGroupPayload
  updateFitnessNetwork(input: UpdateFitnessNetworkInput!): UpdateFitnessNetworkPayload
  updateFollowupGroup(input: UpdateFollowupGroupInput!): UpdateFollowupGroupPayload
  updateGroupClass(input: UpdateGroupClassInput!): UpdateGroupClassPayload
  updateGuru(input: UpdateGuruInput!): UpdateGuruPayload
  updateGuruSalary(input: UpdateGuruSalaryInput!): UpdateGuruSalaryPayload
  updateLocation(input: UpdateLocationInput!): UpdateLocationPayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
  updatePricingOptions(input: UpdatePricingOptionsInput!): UpdatePricingOptionsPayload
  updateReservation(input: UpdateReservationInput!): UpdateReservationPayload
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

"""Guru Notes about clients"""
type Note {
  body: String!
  client: Client
  createdAt: DateTime
  createdAtTimestamp: Int
  errors: [Error]
  guru: Guru
  id: ID!
  isHidden: Boolean
  type: String
  updatedAt: DateTime
  updatedAtTimestamp: Int
}

"""The connection type for Note."""
type NoteConnection {
  """A list of edges."""
  edges: [NoteEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type NoteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Note
}

"""Note Statistic"""
type NoteStatisticType {
  activeClients: Int
  clientsWithNotes: Int
  endDate: String
  general: Int
  locationId: String
  personal: Int
  startDate: String
  total: Int
}

"""Allowed order types"""
enum OrderEnum {
  """Ascending ordering"""
  asc

  """Descending ordering"""
  desc
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Personas message information"""
type Personas__Message {
  client: Client!
  content: String!
  id: ID!
  sender: Profile!
  sentAt: DateTime!
  sentAtTimestamp: Int!
  subject: String!
  task: Personas__Task!
}

"""Personas task information"""
type Personas__Task {
  client: Client!
  createdAt: DateTime!
  createdAtTimestamp: Int!
  explanation: String
  id: ID!
  location: Location!
  message: Personas__Message
  segment: Segment!
  segmentRecommendation: SegmentRecommendation
  status: String!
  statusChangedAt: DateTime
  statusChangedAtTimestamp: Int
  statusChangedBy: Profile
}

"""The connection type for Personas__Task."""
type Personas__TaskConnection {
  """A list of edges."""
  edges: [Personas__TaskEdge]

  """A list of nodes."""
  nodes: [Personas__Task]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Total count of edges"""
  totalCount: Int!
}

"""Personas task detailed information"""
type Personas__TaskDetails {
  client: Client!
  createdAt: DateTime!
  createdAtTimestamp: Int!
  explanation: String
  halfYearHistory: [Hash!]!
  id: ID!
  instructorVisits: [Hash!]!
  location: Location!
  message: Personas__Message
  segment: Segment!
  segmentRecommendation: SegmentRecommendation
  status: String!
  statusChangedAt: DateTime
  statusChangedAtTimestamp: Int
  statusChangedBy: Profile
}

"""An edge in a connection."""
type Personas__TaskEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Personas__Task
}

type Plan {
  amount: String
  description: String
  id: ID!
  interval: String
  isActive: Boolean
  name: String
  trialPeriodDays: Int
}

"""The connection type for Plan."""
type PlanConnection {
  """A list of edges."""
  edges: [PlanEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type PlanEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Plan
}

"""Price Statistic type"""
type PriceStatistic {
  averageVisits: Float
  confirmedAt: DateTime
  duration: Int
  id: String
  isThirdParty: Boolean
  locationId: String
  mbPrice: Float
  name: String
  price: Float
  priceCount: Int
  pricePerSession: Float
  priceType: String
  totalCount: Int
}

"""An edge in a connection."""
type PriceStatisticEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PriceStatistic
}

"""The connection type for PriceStatistic."""
type PriceStatisticTotalCountType {
  """A list of edges."""
  edges: [PriceStatisticEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""Pricing Option type"""
type PricingOption {
  confirmedAt: DateTime
  count: Int
  duration: Int
  errors: [Error]
  fitnessNetwork: FitnessNetwork
  id: ID!
  isActive: Boolean
  isAutoRenewable: Boolean
  isIntroOffer: Boolean
  isThirdParty: Boolean
  name: String
  price: Float
  pricePerSession(dateRange: [String]): Float
  priceType: String
}

"""Pricing option input type"""
input PricingOptionInput {
  pricingOptionId: ID!
  price: Float
  duration: Int
  isIntroOffer: Boolean
  isAutoRenewable: Boolean
}

"""Personas Profile Type"""
union Profile = Admin | Guru | User

"""Public Profile type"""
type PublicProfile {
  avatar: Image
  bio: String
  email: String
  firstName: String
  fitnessNetwork: FitnessNetworkPublic
  fitnessNetworkId: ID
  id: ID
  imageUrl: String
  lastName: String
  profileType: String
  socials: [SocialType]
}

"""The connection type for PublicProfile."""
type PublicProfileConnection {
  """A list of edges."""
  edges: [PublicProfileEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type PublicProfileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PublicProfile
}

"""The query root of this schema"""
type Query {
  """Get Access Code"""
  accessToken(token: ID!): AccessTokenType
  adoptionStatistics(fitnessNetworkId: ID!, locationId: ID): AdoptionStatistic
  avgDailyGuruRetentionRates(fitnessNetworkId: ID!, retentionDate: Date, locationIds: [ID], topPercent: Int, topLimit: Int): String
  avgGtbRetentionRates(fitnessNetworkId: ID!, startDate: Date!, endDate: Date!, excludeZeros: Boolean, guruIds: [ID], locationIds: [ID]): [AvgGtbRetentionRateType]
  avgMonthlyGuruRetentionRates(fitnessNetworkId: ID!, startDate: Date!, endDate: Date!, locationIds: [ID], topPercent: Int, topLimit: Int): [AvgGuruRetentionRate]
  chatAccountInfos(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    currentGuruJid: String
    currentJid: String
    userJIDS: [String]!
  ): ChatAccountConnection
  chatAuthInfo(
    """Chat Account type. Allowed values: 'guru' or 'admin'"""
    accountType: String
  ): [ChatAuthInfoType]
  chatGroup(currentGuruID: ID, chatableID: ID, roomJID: ID!): ChatGroup @deprecated(reason: "This field deprecated. Use `chatGroupInfo` instead.")
  chatGroupInfo(currentGuruID: ID, chatableID: ID, roomJid: String, publicUrlPath: String): ChatGroup
  chatMemberProfile(currentGuruID: ID, chatableID: ID, jid: String!): ChatMemberProfile
  classAppProfile(clientId: ID!): ClassAppProfile
  classAppStatistics(
    fitnessNetworkId: ID!

    """Available periods: week, month"""
    gainPeriod: String = "week"
  ): ClassAppStatistics

  """Get Client"""
  client(clientId: ID!): Client
  clientCommunications(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    clientId: ID!
  ): ClientCommunicationConnection
  clientDataStatistics(fitnessNetworkId: ID!, locationId: ID): ClientDataStatistic
  clientFeedbackStats(locationIds: [ID], guruIds: [ID], startTimeTimestamp: Int, endTimeTimestamp: Int, paymentType: String, isFirstVisit: Boolean): Hash
  clientFeedbacks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    locationIds: [ID]
    guruIds: [ID]
    startTimeTimestamp: Int
    endTimeTimestamp: Int
    paymentType: String
    isFirstVisit: Boolean
    minRating: Int
    hasComment: Boolean
  ): ClientFeedbackConnection
  clientQuizStatistics(fitnessNetworkIds: [ID!], targetField: String!, groupClassSessionId: ID): [QuizAnswerStatistics]
  clientReservations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    clientId: ID!
    guruIds: [ID]
    orderByStartTime: OrderEnum
    startTimeRange: [DateTime]

    """Available scopes: active, attended, booked, canceled"""
    scope: String
  ): ReservationConnection
  clientStatistics(type: String!, fitnessNetworkIds: [ID], guruIds: [ID], groupClassSessionIds: [ID], isCompact: Boolean, labels: [String]): [Statistics]
  clients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]!
    guruIds: [ID]
    ageRange: [Int]
    attendsNumberRange: [Int]
    gender: String
    fullName: String
    quizQuestion: String
    quizAnswerId: ID
    hasClassAppAccount: Boolean
    orderByClientAccountInvitations: OrderEnum
  ): ClientConnection
  communityOrientedStatistics(fitnessNetworkId: ID!): CommunityOrientedStatistics
  contacts(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    currentGuruJid: String
    currentJid: String
    contactJid: String
  ): ContactTypeConnection

  """Get current user"""
  currentUser: User
  dailyFitnessNetworkRetentionRates(fitnessNetworkId: ID!, startDate: Date!, endDate: Date!, locationIds: [ID]): [FitnessNetworkRetentionRate]
  dailyGuruRetentionRates(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    locationIds: [ID]
    guruIds: [ID]
    orderByRate: OrderEnum
    orderByDate: OrderEnum
    startDate: Date
    endDate: Date
    hideEmptyRecords: Boolean
  ): GuruRetentionRateConnection
  emailThread(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    initiatorId: ID!
    clientId: ID!
  ): IncomingEmailConnection
  fitnessActivities(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    isActive: Boolean
  ): FitnessActivityConnection

  """Get Fitness Network"""
  fitnessNetwork(fitnessNetworkId: ID!): FitnessNetwork
  fitnessNetworkStatistics(fitnessNetworkId: ID!, type: String!, fields: [String], dateRange: [String], followupGroupIds: [ID], guruIds: [ID], locationIds: [ID], intervalType: String, intervalNumber: Int, isCompact: Boolean): [Statistics]
  fitnessNetworks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    name: String
  ): FitnessNetworkPublicConnection
  followupByFollowupGroupStatistics(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    startDate: Date!
    endDate: Date!
    followupGroupIds: [ID]
    locationIds: [ID]
  ): FollowupStatisticTotalCountType
  followupByGuruStatistics(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    startDate: Date!
    endDate: Date!
    guruIds: [ID]
    locationIds: [ID]
  ): FollowupStatisticTotalCountType
  followupByIntervalStatistics(fitnessNetworkId: ID!, intervalType: IntervalType!, intervalNumber: Int!, locationIds: [ID]): [FollowupStatisticType]
  followupEfficiencyStatistics(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    startDate: Date!
    endDate: Date!
    isPositive: Boolean
    orderByEffectiveDate: OrderEnum
    showAll: Boolean
  ): FollowupEfficiencyStatisticsTypeConnection
  followupGroup(followupGroupId: ID!): FollowupGroup
  followupGroups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]!

    """Allowed statuses: active, inactive"""
    status: String
  ): FollowupGroupConnection
  followupStatistics(fitnessNetworkId: ID!, startDate: Date!, endDate: Date!, locationIds: [ID]): [FollowupStatisticType]
  globalFitnessNetworkRetentionRates(startDate: Date!, endDate: Date!, isCompact: Boolean, topPercent: Int, topLimit: Int): [GlobalRetentionRate]
  globalGuruRetentionRates(startDate: Date!, endDate: Date!, isCompact: Boolean, topPercent: Int, topLimit: Int): [GlobalRetentionRate]

  """Get Group Class Session"""
  groupClassSession(groupClassSessionId: ID!): GroupClassSession
  groupClassSessionOverlaps(groupClassSessionIds: [ID!]!, fitnessNetworkId: ID!): [GroupClassSessionOverlaps]
  groupClassSessions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]!
    startTimeRange: [String]!

    """Available scopes: completed, scheduled, past"""
    scope: String
  ): GroupClassSessionConnection

  """Get guru"""
  guru(guruId: ID!): Guru
  guruBenchmarks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
  ): GuruBenchmarkConnection

  """Get guru followup Group"""
  guruFollowupGroup(guruFollowupGroupId: ID!): GuruFollowupGroup
  guruFollowupGroupRecipients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    guruFollowupGroupId: ID!
  ): GuruFollowupRecipientConnection
  guruFollowupGroups(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]!
    groupDateRange: [String]!
    showInactive: Boolean
    showGroupsForFollowupAll: Boolean
  ): GuruFollowupGroupConnection
  guruFollowupRecipients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    dateRange: [String]!
    followupGroupIds: [ID]
    guruIds: [ID]
    locationIds: [ID]
    guruFollowupIds: [ID]
  ): GuruFollowupRecipientConnection
  guruReport(reportId: ID!): Analytics__GuruReport
  guruReports(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    reportDateRange: [Date]
    fitnessNetworkIds: [ID]
    guruIds: [ID]
    order: [String]
    includePassive: Boolean
    isGuruVersion: Boolean
  ): Analytics__GuruReportConnection
  guruSalaries(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]!
    effectiveDateRange: [Date]
    guruIds: [ID]
  ): GuruSalaryConnection
  guruStatistics(fitnessNetworkId: ID!, startDate: Date, endDate: Date, first: Limit, last: Limit, locationIds: [ID]): [GuruStatistic]
  gurus(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fullName: String
    fitnessNetworkIds: [ID]
    invitedOnly: Boolean
  ): PublicProfileConnection
  kpiReportFitnessNetwork(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    period: String!
    startDate: Date!
    endDate: Date!
  ): KpiReportTypeConnection
  kpiReportGurus(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    period: String!
    guruId: ID
    startDate: Date!
    endDate: Date!
  ): KpiReportTypeConnection
  lostAccountsBuckets(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]!

    """Allowed statuses: pending, set"""
    status: String
  ): LostAccountsBucketConnection
  lostAccountsDailyStats(fitnessNetworkId: ID!): DailyStatsType
  lostAccountsDefaultBuckets(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    includeAll: Boolean
  ): LostAccountsDefaultBucketConnection
  lostAccountsDefaultSender(fitnessNetworkId: ID!): LostAccountsDefaultSender
  lostAccountsMessages(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    guruId: ID
    lostAccountsDefaultBucketId: ID
    sentAtRange: [DateTime]
  ): LostAccountsMessageConnection
  lostAccountsMonthlyStats(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
  ): MonthlyStatsTypeConnection
  lostAccountsOffers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    name: String
    includeAll: Boolean
  ): LostAccountsOfferConnection
  mbGurus(fitnessNetworkId: ID!): [Guru]
  mbLocations(fitnessNetworkId: ID!): [Location]
  mbServices(fitnessNetworkId: ID!, forcePull: Boolean): [PricingOption] @deprecated(reason: "Renamed to pricingOptions")
  monthlyFitnessNetworkRetentionRates(fitnessNetworkId: ID!, startDate: Date!, endDate: Date!, locationIds: [ID]): [FitnessNetworkRetentionRate]
  monthlyGtbRetentionRates(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    locationIds: [ID]
    guruIds: [ID]
    orderByRate: OrderEnum
    orderByDate: OrderEnum
    startDate: Date
    endDate: Date
    hideEmptyRecords: Boolean
  ): GtbRetentionRateConnection
  monthlyGuruRetentionRates(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    locationIds: [ID]
    guruIds: [ID]
    orderByRate: OrderEnum
    orderByDate: OrderEnum
    startDate: Date
    endDate: Date
    hideEmptyRecords: Boolean
  ): GuruRetentionRateConnection
  notesByIntervalStatistics(fitnessNetworkId: ID!, intervalType: IntervalType!, intervalNumber: Int!, locationIds: [ID]): [NoteStatisticType]
  notesByTypeStatistics(fitnessNetworkId: ID!, startDate: Date!, endDate: Date!, locationIds: [ID]): [NoteStatisticType]
  notesStatistics(fitnessNetworkId: ID!, startDate: Date!, endDate: Date!, locationIds: [ID]): [NoteStatisticType]
  participantsForChat(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    currentGuruID: ID
    chatableID: ID

    """All values clients, gurus, admins or all"""
    type: String!
    query: String
  ): ChatParticipantTypeConnection
  personasTaskDetails(taskId: ID!): Personas__TaskDetails
  personasTasks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]
    locationIds: [ID]
    startTimeTimestamp: Int!
    endTimeTimestamp: Int!

    """
    Available statuses: ["open", "locked", "completed", "dismissed", "expired",
    "duplicated"]. Note: "open" returns open and locked.
    """
    status: String!
  ): Personas__TaskConnection
  plans(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PlanConnection
  priceStatistics(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID!
    startDate: Date!
    endDate: Date!
    locationIds: [ID]
    guruIds: [ID]
    isConfirmed: Boolean
    orderByTotalCount: OrderEnum
  ): PriceStatisticTotalCountType
  pricingOptions(
    fitnessNetworkId: ID!
    forcePull: Boolean
    name: String
    isIntroOffer: Boolean
    isAutoRenewable: Boolean

    """Available statuses: ["single_session", "package", "unlimited"]."""
    priceTypes: [String]
  ): [PricingOption]
  staffs(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]!
    staffId: ID
    query: String
  ): StaffConnection
  surveyAnswers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkIds: [ID]
    guruIds: [ID]
    isRead: Boolean
  ): SurveyAnswerConnection
  verifyMbServices(
    fitnessNetworkId: ID!

    """Available types: [:reward, :purchase]."""
    mbServiceType: String = "reward"
    forcePull: Boolean
  ): [Hash]
}

"""Statistics for a quiz answer"""
type QuizAnswerStatistics {
  count: Int
  id: ID
  name: String
}

"""Autogenerated input type of ReadAnnouncement"""
input ReadAnnouncementInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  announcementId: String!
}

"""Autogenerated return type of ReadAnnouncement"""
type ReadAnnouncementPayload {
  announcement: Announcement

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Reference Type"""
union Reference = SurveyMessage | GuruFollowup | LostAccountsMessage | Personas__Message

"""Autogenerated input type of RegisterDevice"""
input RegisterDeviceInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String!
  platform: String!
  app_name: String!
  version: String!
  env: String!
}

"""Autogenerated return type of RegisterDevice"""
type RegisterDevicePayload {
  appVersionNote: AppVersionNote

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isRegistered: Boolean
}

"""Autogenerated input type of RequestActivationLinkMutation"""
input RequestActivationLinkMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  profileId: ID!
}

"""Autogenerated return type of RequestActivationLinkMutation"""
type RequestActivationLinkMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [Error]
  status: String
}

"""Reservation"""
type Reservation {
  client: Client!
  clientAttendsCount: Int
  errors: [Error]
  groupClassSession: GroupClassSession!
  guru: Guru
  id: ID!
  isCheckedIn: Boolean
  isClientBirthdaySameDay: Boolean
  isFirstFitnessNetworkVisit: Boolean
  isFirstVisit: Boolean
  isZoomAttended: Boolean
  isZoomNotified: Boolean
  paymentType: String
  priorVisitsCount: Int
  status: String!
  zoomJoinUrl: String
}

"""The connection type for Reservation."""
type ReservationConnection {
  """A list of edges."""
  edges: [ReservationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type ReservationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Reservation
}

"""Personas segment information"""
type Segment {
  description: String!
  goal: String
  isActive: String!
  name: String!
  priority: Int!
  suggestedAction: String
}

"""Personas segment recommendation information"""
type SegmentRecommendation {
  content: String!
  isActive: String!
  subject: String!
}

"""Sender Profile"""
union Sender = Guru | Client | Admin | LostAccountsDefaultSender

"""Autogenerated input type of SendFollowup"""
input SendFollowupInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruFollowupGroupId: ID!
  recipientIds: [ID]!
  subject: String!
  content: String!
  contentType: String
  saveAsDefault: Boolean
  socials: [SocialInput]
  saveSocials: Boolean
}

"""Autogenerated return type of SendFollowup"""
type SendFollowupPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruFollowupGroup: GuruFollowupGroup
}

"""Autogenerated input type of SendInvitesMutation"""
input SendInvitesMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  profileIds: [ID]
  profileTypes: [String]
}

"""Autogenerated return type of SendInvitesMutation"""
type SendInvitesMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
}

"""Autogenerated input type of SendTaskMessage"""
input SendTaskMessageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  taskId: ID!
  subject: String!
  content: String!
}

"""Autogenerated return type of SendTaskMessage"""
type SendTaskMessagePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  message: Personas__Message
}

"""Autogenerated input type of SetCreditCard"""
input SetCreditCardInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID
  stripeToken: String
}

"""Autogenerated return type of SetCreditCard"""
type SetCreditCardPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  creditCard: CreditCard
  fitnessNetwork: FitnessNetwork
}

"""Autogenerated input type of SetDefaultGuruFollowup"""
input SetDefaultGuruFollowupInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  followupGroupId: ID
  guruId: ID
  subject: String
  content: String
}

"""Autogenerated return type of SetDefaultGuruFollowup"""
type SetDefaultGuruFollowupPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  defaultGuruFollowup: DefaultGuruFollowup
}

"""Autogenerated input type of SetFollowupGroups"""
input SetFollowupGroupsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  followupGroups: [FollowupGroupInput]!
}

"""Autogenerated return type of SetFollowupGroups"""
type SetFollowupGroupsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  followupGroups: [FollowupGroup]
}

"""Autogenerated input type of SetGurus"""
input SetGurusInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  gurus: [GuruInput]!
}

"""Autogenerated return type of SetGurus"""
type SetGurusPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  gurus: [Guru]
}

"""Autogenerated input type of SetGuruSuspension"""
input SetGuruSuspensionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  guruId: ID!
  isSuspended: Boolean!
}

"""Autogenerated return type of SetGuruSuspension"""
type SetGuruSuspensionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guru: Guru
}

"""Autogenerated input type of SetLocations"""
input SetLocationsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  locations: [LocationInput]!
}

"""Autogenerated return type of SetLocations"""
type SetLocationsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  locations: [Location]
}

"""Autogenerated input type of SetLostAccountsBucket"""
input SetLostAccountsBucketInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  lostAccountsBucketId: ID!
  subject: String!
  content: String!
}

"""Autogenerated return type of SetLostAccountsBucket"""
type SetLostAccountsBucketPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  lostAccountsBucket: LostAccountsBucket
}

"""Autogenerated input type of SetLostAccountsDefaultBuckets"""
input SetLostAccountsDefaultBucketsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  lostAccountsDefaultBuckets: [LostAccountsDefaultBucketInput]!
}

"""Autogenerated return type of SetLostAccountsDefaultBuckets"""
type SetLostAccountsDefaultBucketsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  lostAccountsDefaultBuckets: [LostAccountsDefaultBucket]
}

"""Autogenerated input type of SetLostAccountsDefaultSender"""
input SetLostAccountsDefaultSenderInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  lostAccountsDefaultSenderId: ID
  fitnessNetworkId: ID!
  firstName: String
  lastName: String
  email: String
}

"""Autogenerated return type of SetLostAccountsDefaultSender"""
type SetLostAccountsDefaultSenderPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  lostAccountsDefaultSender: LostAccountsDefaultSender
}

"""Autogenerated input type of SetPricingOptions"""
input SetPricingOptionsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  pricingOptions: [PricingOptionInput]!
  pricePerSessionDateRange: [Date]!
  confirmAllByDateRange: [Date]
}

"""Autogenerated return type of SetPricingOptions"""
type SetPricingOptionsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  pricingOptions: [PriceStatistic]
}

"""Autogenerated input type of SetPromoSubscription"""
input SetPromoSubscriptionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  planId: ID!

  """Available segments: 'silver', 'gold'"""
  segment: String!
  stripeToken: String
}

"""Autogenerated return type of SetPromoSubscription"""
type SetPromoSubscriptionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  subscription: Subscription
}

"""Autogenerated input type of SetSocials"""
input SetSocialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sociableId: ID
  socials: [SocialInput]!
}

"""Autogenerated return type of SetSocials"""
type SetSocialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  socials: [SocialType]
}

"""Autogenerated input type of SetStripeAccount"""
input SetStripeAccountInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
}

"""Autogenerated return type of SetStripeAccount"""
type SetStripeAccountPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  onboardingLink: String
}

"""Autogenerated input type of SetSubscription"""
input SetSubscriptionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  planId: ID!
  stripeToken: String
}

"""Autogenerated return type of SetSubscription"""
type SetSubscriptionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  subscription: Subscription
}

"""Autogenerated input type of SetUserSocials"""
input SetUserSocialsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  socials: [SocialInput]!
}

"""Autogenerated return type of SetUserSocials"""
type SetUserSocialsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  socials: [SocialType]
}

"""Autogenerated input type of SetZoomPreferences"""
input SetZoomPreferencesInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  allGroupClassSessionEnabled: Boolean
  groupClassSessions: [ZoomMeetingInputType]!
}

"""Autogenerated return type of SetZoomPreferences"""
type SetZoomPreferencesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
  groupClassSessions: [GroupClassSession]
}

"""Autogenerated input type of SetZoomUsers"""
input SetZoomUsersInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  zoomUsers: [ZoomUserInputType]!
}

"""Autogenerated return type of SetZoomUsers"""
type SetZoomUsersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  zoomUsers: [ZoomUser]
}

"""Autogenerated input type of SignOut"""
input SignOutInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String!
}

"""Autogenerated return type of SignOut"""
type SignOutPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isSuccess: Boolean
}

"""Social input type"""
input SocialInput {
  platform: String
  uid: String
  isActive: Boolean
}

"""Social Type"""
type SocialType {
  id: ID!
  isActive: Boolean
  platform: String!
  token: String
  uid: String
  url: String
  user: User
}

"""Staff Type"""
type Staff {
  item: StaffItem
}

"""Admin Staff Profile"""
type StaffAdminProfile {
  avatar: Image
  email: String
  firstName: String
  id: ID!
  lastName: String
  phoneNumber: String
  studioName: String
}

"""The connection type for Staff."""
type StaffConnection {
  """A list of edges."""
  edges: [StaffEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type StaffEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Staff
}

"""Guru Staff Profile"""
type StaffGuruProfile {
  avatar: Image
  bio: String
  email: String
  firstName: String
  id: ID!
  jid: String
  lastName: String
  phoneNumber: String
  studioName: String
}

"""Staff Item Type"""
union StaffItem = StaffGuruProfile | StaffAdminProfile

"""Statistics Type"""
type Statistics {
  count: Int
  data: [Statistics]
  name: String!
  value: String
}

enum StripeAccountOnboardingStepEnum {
  """The Stripe integration has not been started yet"""
  not_started

  """The Stripe integration has been started and still in progress"""
  in_progress

  """The Stripe integration has already been completed"""
  completed
}

"""Autogenerated input type of SubmitMetaData"""
input SubmitMetaDataInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String
  platform: String!
  app_name: String!
  version: String!
  env: String!
}

"""Autogenerated return type of SubmitMetaData"""
type SubmitMetaDataPayload {
  appVersionNote: AppVersionNote

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isRegistered: Boolean
}

type Subscription {
  endDate: DateTime
  endDateTimestamp: Int
  gracePeriodDays: Int
  hardEndDate: DateTime
  hardEndDateTimestamp: Int
  id: ID!
  inGracePeriod: Boolean
  isActive: Boolean
  paymentCycle: Int
  plan: Plan
  trialEndTime: DateTime
  trialEndTimeTimestamp: Int
}

"""Support Request"""
type SupportRequest {
  email: String
  message: String
  name: String
  screenshot: Image
}

type SurveyAnswer {
  answer: String
  client: Client
  createdAt: DateTime
  createdAtTimestamp: Int
  id: ID!
  isRead: Boolean
  surveyMessage: SurveyMessage
}

"""The connection type for SurveyAnswer."""
type SurveyAnswerConnection {
  """A list of edges."""
  edges: [SurveyAnswerEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type SurveyAnswerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SurveyAnswer
}

type SurveyMessage {
  client: Client
  groupClassSession: GroupClassSession
  guru: Guru
  id: ID!
  sentAt: String
}

"""Autogenerated input type of UnBanUser"""
input UnBanUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  jid: String!
  roomJID: String!
}

"""Autogenerated return type of UnBanUser"""
type UnBanUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  isBanned: Boolean
}

"""Autogenerated input type of UpdateAdmin"""
input UpdateAdminInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  adminId: ID!
  email: String
  title: String
  firstName: String
  lastName: String
  phoneNumber: String
  isActive: Boolean
  isChatEnabled: Boolean
  isManager: Boolean
  isTaskListEnabled: Boolean
}

"""Autogenerated return type of UpdateAdmin"""
type UpdateAdminPayload {
  admin: Admin

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User
}

"""Autogenerated input type of UpdateChatGroup"""
input UpdateChatGroupInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  currentGuruID: ID!
  roomJID: ID!
  name: String!
  description: String
  isPublic: Boolean!
  publicUrlPath: String
  logo: String
}

"""Autogenerated return type of UpdateChatGroup"""
type UpdateChatGroupPayload {
  chatGroup: ChatGroup

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of UpdateFitnessNetwork"""
input UpdateFitnessNetworkInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  name: String
  description: String
  mbSiteId: Int
  mbUsername: String
  mbPassword: String
  contactFirstName: String
  contactLastName: String
  contactEmail: String
  contactPhoneNumber: String
  hasMultiGuruClasses: Boolean
  termsFlg: Boolean
  hasLostAccountsActive: Boolean
  isTaskListEnabled: Boolean
  taskListDefaultNumber: Int
  hasSurveysEnabled: Boolean
  isZoomEnabled: Boolean
  defaultIsZoomEnabled: Boolean
  classAppMarketingEmailsEnabled: Boolean
  fitnessActivityId: ID
}

"""Autogenerated return type of UpdateFitnessNetwork"""
type UpdateFitnessNetworkPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetwork: FitnessNetwork
}

"""Autogenerated input type of UpdateFollowupGroup"""
input UpdateFollowupGroupInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  followupGroupId: ID!
  name: String!
  description: String
  recommendedSubject: String!
  recommendedContent: String!
  isActive: Boolean
  position: Int
  attendsNumber: Int
}

"""Autogenerated return type of UpdateFollowupGroup"""
type UpdateFollowupGroupPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  followupGroup: FollowupGroup
}

"""Autogenerated input type of UpdateGroupClass"""
input UpdateGroupClassInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  groupClassId: ID!
  name: String
  description: String
  fitnessActivityIds: [ID]
}

"""Autogenerated return type of UpdateGroupClass"""
type UpdateGroupClassPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  groupClass: GroupClass
}

"""Autogenerated input type of UpdateGuru"""
input UpdateGuruInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruId: ID!
  email: String
  mobilePhoneNumber: String
  mbUsername: String
  mbPassword: String
  isActive: Boolean
  hasClientCheckinAllowed: Boolean
  hasFollowupActive: Boolean
  hasAutoFollowupActive: Boolean
}

"""Autogenerated return type of UpdateGuru"""
type UpdateGuruPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guru: Guru
}

"""Autogenerated input type of UpdateGuruSalary"""
input UpdateGuruSalaryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruSalaryId: ID!
  type: String
  effectiveDate: DateTime
  amount: Int
  amountPerClass: Int
  amountPerVisit: Int
  visitThreshold: Int
}

"""Autogenerated return type of UpdateGuruSalary"""
type UpdateGuruSalaryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  guruSalary: GuruSalary
}

"""Autogenerated input type of UpdateLocation"""
input UpdateLocationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  locationId: ID!
  contactName: String
  contactEmail: String
  contactPhoneNumber: String
  isActive: Boolean
}

"""Autogenerated return type of UpdateLocation"""
type UpdateLocationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  location: Location
}

"""Autogenerated input type of UpdateNote"""
input UpdateNoteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  noteId: ID!
  body: String!
}

"""Autogenerated return type of UpdateNote"""
type UpdateNotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  note: Note
}

"""Autogenerated input type of UpdatePricingOptions"""
input UpdatePricingOptionsInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fitnessNetworkId: ID!
  pricingOptions: [PricingOptionInput]!
  defaultIsAutoRenewable: Boolean
  defaultIsIntroOffer: Boolean
}

"""Autogenerated return type of UpdatePricingOptions"""
type UpdatePricingOptionsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pricingOptions: [PricingOption]
}

"""Autogenerated input type of UpdateReservation"""
input UpdateReservationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  reservationId: ID
  value: Boolean
}

"""Autogenerated return type of UpdateReservation"""
type UpdateReservationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  reservation: Reservation
}

"""Autogenerated input type of UpdateTask"""
input UpdateTaskInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  taskId: ID
  status: String
}

"""Autogenerated return type of UpdateTask"""
type UpdateTaskPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  task: Personas__Task
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: String
  username: String
  firstName: String
  lastName: String
  password: String
  passwordConfirmation: String
  currentPassword: String
  resetPasswordToken: String
  provider: String
  providerToken: String
  uid: String
}

"""Autogenerated return type of UpdateUser"""
type UpdateUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User
}

"""Access User"""
type User {
  adminFitnessNetworks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID
  ): FitnessNetworkConnection
  admins(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID
  ): AdminConnection
  clientFitnessNetworks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID
  ): FitnessNetworkConnection
  clientQuiz: [Hash]
  createdAt: DateTime
  email: String!
  errors: [Error]
  firstName: String
  guru(fitnessNetworkId: ID!): Guru
  guruFitnessNetworks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID
  ): FitnessNetworkConnection
  gurus(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    fitnessNetworkId: ID
  ): GuruConnection
  id: ID!
  intercomAuthtoken: String
  lastName: String
  pendingProfiles(profileType: String!): [PublicProfile]
  socials: [SocialType]
  username: String
}

"""Zoom meeting input type"""
input ZoomMeetingInputType {
  groupClassSessionId: ID!
  isEnabled: Boolean!
}

type ZoomUser {
  """Indicates whether this Zoom user is able to schedule Zoom meetings."""
  canSchedule: Boolean
  createdAt: DateTime
  createdAtTimestamp: Int

  """User's email in Zoom."""
  email: String
  firstName: String
  groupClassSessions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): GroupClassSessionConnection
  id: ID!

  """
  Indicates whether this Zoom user is currently being used for scheduling Zoom meetings.
  """
  isEnabled: Boolean

  """
  Indicates whether this Zoom user has been selected to schedule Zoom meetings.
  """
  isSelected: Boolean
  lastName: String

  """
  Zoom user's plan type. Possible values are 'basic', 'licensed', 'on_prem'.
  """
  licenseType: String

  """Status of Zoom user's account. Possible values are TBD."""
  status: String

  """
  Displays whether Zoom user is verified or not by Zoom. Possible values are 'pending', 'confirmed'
  """
  verified: String
  zoomId: String
}

"""The connection type for ZoomUser."""
type ZoomUserConnection {
  """A list of edges."""
  edges: [ZoomUserEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""An edge in a connection."""
type ZoomUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ZoomUser
}

"""Zoom user input type"""
input ZoomUserInputType {
  id: ID!
  isEnabled: Boolean!
}
